{"version":3,"sources":["images/header-logo.svg","images/brush.svg","images/Lid.svg","images/Bin.svg","components/Header/Header.js","components/Contexts/CurrentUserContext.js","components/Card/Card.js","components/Main/Main.js","components/Footer/Footer.js","components/ImagePopup/ImagePopup.js","components/PopupWithForm/PopupWithForm.js","components/EditProfilePopup/EditProfilePopup.js","components/EditAvatarPopup/EditAvatarPopup.js","components/AddPlacePopup/AddPlacePopup.js","components/ConfirmationPopup/ConfirmationPopup.js","utils/Api.js","components/Contexts/CardsContext.js","utils/utils.js","components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","src","headerLogoPath","alt","CurrentUserContext","createContext","Card","imgLink","name","likesNumber","isLiked","handleCardClicked","cardOwnerId","onCardLike","c","onCardDelete","card","isOwn","useContext","_id","cardDeleteButtonClassName","cardLikeButtonClassName","onClick","lidPath","binPath","Main","onEditProfile","onAddPlace","onEditAvatar","cards","useState","isAvatarHovered","setIsAvatarHovered","currentUser","handleMouseEnterAvatar","avatar","onMouseEnter","onMouseLeave","brushPath","about","map","key","cardId","Footer","ImagePopup","isOpen","onClose","type","description","PopupWithForm","title","children","onSubmit","hasInvalid","buttonTitle","isLoading","noValidate","disabled","EditProfilePopup","onUpdateUser","setIsLoading","userName","userDescription","inputValue","setInputValue","isValid","setIsValid","setHasInvalid","validationMessage","setValidationMessage","handleInput","evt","target","value","validity","valid","useEffect","preventDefault","newName","htmlFor","placeholder","id","required","minLength","maxLength","onChange","EditAvatarPopup","onUpdateAvatar","avatarLink","avatarRef","useRef","current","ref","AddPlacePopup","placeName","link","ConfirmationPopup","action","api","baseUrl","token","this","_baseUrl","_token","res","ok","json","Promise","reject","status","fetch","headers","authorization","then","_resultsProcessing","catch","err","console","log","data","method","body","JSON","stringify","_cardId","CardsContext","cardsFromServerReprocessor","user","likes","Object","keys","length","some","i","owner","App","setCurrentUser","isEditProfilePopupOpen","setIsEditProfilePopupOpen","isAddPlacePopupOpen","setIsAddPlacePopupOpen","isEditAvatarPopupOpen","setIsEditAvatarPopupOpen","isConfirmationPopupOpen","setIsConfirmationPopupOpen","isImgPopupOpen","setIsImgPopupOpen","selectedCard","setSelectedCard","setCards","a","getUserInfo","userInfo","getInitialCards","cardsFromServer","cardsToSet","item","getUserAndCards","closeAllPopups","window","removeEventListener","handleEscClose","userData","sendUserInfo","newUser","uploadAvatar","handleCardLike","dislikeCard","likeCard","newCardFromServer","newCard","newCards","cardDelete","deleteCard","filter","handleAddPlaceSubmit","uploadCard","cardToSet","Provider","addEventListener","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.0597aefb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/header-logo.855a8c98.svg\";","module.exports = __webpack_public_path__ + \"static/media/brush.34c46850.svg\";","module.exports = __webpack_public_path__ + \"static/media/Lid.026bd200.svg\";","module.exports = __webpack_public_path__ + \"static/media/Bin.949285d4.svg\";","import React from 'react';\r\nimport headerLogoPath from '../../images/header-logo.svg';\r\n\r\nfunction Header () {\r\n    return (\r\n        <header className=\"header\">\r\n            <img src={headerLogoPath} alt=\"Mesto-Russia\" className=\"header__logo\"/>\r\n        </header> \r\n    )\r\n}\r\n\r\nexport default Header;","import {createContext} from 'react'\r\n\r\nexport const CurrentUserContext = createContext();","import lidPath from '../../images/Lid.svg';\r\nimport binPath from '../../images/Bin.svg';\r\nimport React, {useContext} from 'react';\r\nimport {CurrentUserContext} from '../Contexts/CurrentUserContext';\r\n\r\nfunction Card ({imgLink, name, likesNumber, isLiked, handleCardClicked, cardOwnerId, onCardLike, c, onCardDelete}) {\r\n    const card = c; //Объект с карточкой из Main\r\n    const currentUser = useContext(CurrentUserContext);\r\n\r\n    // Определяем, являемся ли мы владельцем текущей карточки\r\n    const isOwn = cardOwnerId === currentUser._id;\r\n\r\n    // Создаём переменную, которую после зададим в `className` для кнопки удаления\r\n    const cardDeleteButtonClassName = (`delete-button ${isOwn ? '' : 'delete-button_state_hidden'}`);\r\n\r\n    // Создаём переменную, которую после зададим в `className` для кнопки лайка\r\n    const cardLikeButtonClassName = `like-button ${isLiked ? 'like-button_state_active' : ''}`;\r\n\r\n    const handleLikeClick = () => {\r\n        onCardLike(card)\r\n    }\r\n\r\n    const handleDeleteClick = () => {\r\n        onCardDelete(card)\r\n    }\r\n\r\n    return(\r\n        <div className=\"card\">\r\n            <button className={cardDeleteButtonClassName} onClick={handleDeleteClick}>\r\n                <img src={lidPath} alt=\"Крышка\" className=\"delete-button__lid\"/>\r\n                <img src={binPath} alt=\"Урна\" className=\"delete-button__bin\"/>\r\n            </button>\r\n            <img src={imgLink} className=\"card__picture\" alt={name} onClick={handleCardClicked}/>\r\n            <div className=\"card__bottom\">\r\n                <p className=\"card__name\">{name}</p>\r\n                <div className=\"like-section\">\r\n                    <button className={cardLikeButtonClassName} onClick={handleLikeClick} />\r\n                    <p className=\"like-section__likes-counter\">{likesNumber}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React, {useState, useContext} from 'react';\r\nimport brushPath from '../../images/brush.svg';\r\nimport Card from '../Card/Card';\r\nimport {CurrentUserContext} from '../Contexts/CurrentUserContext';\r\n\r\nfunction Main ({onEditProfile, onAddPlace, onEditAvatar, handleCardClicked, onCardLike, onCardDelete, cards}) {\r\n    const [isAvatarHovered, setIsAvatarHovered] = useState(false);\r\n\r\n    const currentUser = useContext(CurrentUserContext);//Подписка на данные о пользователе\r\n\r\n/* Функции рендера кнопки на аватарке */\r\n    const handleMouseEnterAvatar = () => {\r\n        setIsAvatarHovered(true);\r\n    }\r\n\r\n    const handleMouseLeaveAvatar = () => {\r\n        setIsAvatarHovered(false);\r\n    }\r\n    \r\n    return (\r\n        <main className=\"content\">\r\n        <section className=\"profile section\">\r\n            <div className=\"profile-avatar\">\r\n                <img \r\n                src={currentUser.avatar}\r\n                alt={currentUser.name}\r\n                className=\"profile-avatar__image\"\r\n                onMouseEnter={handleMouseEnterAvatar}\r\n                onMouseLeave={handleMouseLeaveAvatar}\r\n                />\r\n                <img \r\n                    src={brushPath} \r\n                    alt=\"Кисточка\" \r\n                    className={`profile-avatar__brush ${isAvatarHovered && 'profile-avatar__brush_state_visible'}`} \r\n                    onClick={onEditAvatar}\r\n                    onMouseEnter={handleMouseEnterAvatar}\r\n                />\r\n            </div>\r\n            <div className=\"profile__info\">\r\n                <div className=\"profile__info-line\">\r\n                <h2 className=\"profile__name\">{currentUser.name}</h2>\r\n                    <button className=\"edit-button profile__edit-button\" onClick={onEditProfile}/>\r\n                </div>\r\n                <p className=\"profile__description\">{currentUser.about}</p>\r\n            </div>\r\n            <button className=\"add-button profile__add-button\" onClick={onAddPlace}></button>\r\n        </section>\r\n        <section className=\"gallery section\">\r\n            {cards.map(card => <Card key={card.cardId} {...card} c={card} handleCardClicked={handleCardClicked} onCardLike={onCardLike} onCardDelete={onCardDelete}/>)}\r\n        </section>\r\n    </main>\r\n    )\r\n}\r\n\r\nexport default Main;","import React from 'react';\r\n\r\nfunction Footer () {\r\n    return (\r\n        <footer className=\"footer\">\r\n            <p className=\"footer__text\">&copy; 2020 Mesto Russia</p>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer","import React from 'react';\r\n\r\nconst ImagePopup = ({card, isOpen, onClose}) => {\r\n    return (\r\n        <div className={`popup popup_type_picture ${isOpen && 'popup-opener'}`}>\r\n            <div className=\"popup__envelope\">\r\n                <button className=\"close-button popup__close-button\" type=\"button\" onClick={onClose} />\r\n                <img src={card.imgLink} alt={card.description} className=\"popup__picture\"/>\r\n                <p className=\"popup__sign\">{card.description}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImagePopup","import React from 'react';\r\n\r\nconst PopupWithForm = ({title, name, isOpen, onClose, children, onSubmit, hasInvalid, buttonTitle, isLoading}) => {\r\n    return (\r\n        <div className={\r\n            `popup popup_type_${name}\r\n             ${isOpen && 'popup-opener'}\r\n    `}>\r\n            <div className=\"popup__window\">\r\n              <h2 className=\"popup__header\">{title}</h2>\r\n              <button className=\"close-button popup__close-button\" type=\"button\" onClick={onClose}/>\r\n              <form className=\"form\" name={name} noValidate onSubmit={onSubmit}>\r\n                    {children}\r\n                    <button\r\n                    className={`submit-button form__submit-button ${hasInvalid ? 'submit-button_disabled' : ''}`}\r\n                    type=\"submit\"\r\n                    disabled={hasInvalid}\r\n                    >\r\n                        {isLoading ? `Выполняем...` : `${buttonTitle}`}\r\n                    </button>\r\n              </form>\r\n         </div>\r\n     </div>\r\n    )\r\n}\r\n\r\nexport default PopupWithForm;","import React, {useState, useContext, useEffect} from 'react';\r\nimport PopupWithForm from '../PopupWithForm/PopupWithForm';\r\nimport {CurrentUserContext} from '../Contexts/CurrentUserContext';\r\n\r\nfunction EditProfilePopup ({isOpen, onClose, onUpdateUser}) {\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    const [inputValue, setInputValue] = useState({\r\n        userName: '',\r\n        userDescription: ''\r\n    })\r\n    const [isValid, setIsValid] = useState({\r\n        userName: true,\r\n        userDescription: true\r\n    })\r\n    const [hasInvalid, setHasInvalid] = useState(false);\r\n    const [validationMessage, setValidationMessage] = useState({\r\n        userName: '',\r\n        userDescription: ''\r\n    });\r\n\r\n    const currentUser = useContext(CurrentUserContext);\r\n    \r\n    const handleInput = (evt) => {\r\n        const {name, value, validity} = evt.target;\r\n        \r\n        setInputValue({\r\n            ...inputValue,\r\n            [name]: value\r\n        })\r\n\r\n        setIsValid({\r\n            ...isValid,\r\n            [name]:validity.valid\r\n        })\r\n\r\n        setValidationMessage({\r\n            ...validationMessage,\r\n            [name]:evt.target.validationMessage\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        (isValid.userName && isValid.userDescription) ? setHasInvalid(false) : setHasInvalid(true)\r\n    }, [inputValue])\r\n\r\n    useEffect(() => {\r\n        setInputValue({\r\n            ...inputValue,\r\n            userName: currentUser.name || '',\r\n            userDescription: currentUser.about || ''\r\n        })\r\n\r\n        setIsValid({\r\n            ...isValid,\r\n            userName: true,\r\n            userDescription: true\r\n        })\r\n      }, [currentUser, isOpen]); /* Стэйт имени и описания меняется при загрузке данных о пользователе с сервера. \r\n      При закрытии попапа значения в строках формы снова сбрасываются на те, которые находятся на сервере.\r\n      Форма в данном случае валидна по дефолту, т.к. обе строки заполнены, значениями, которые прошли валидацию\r\n      и были отправлены на сервер */\r\n\r\n      const handleSubmit = (evt) => {\r\n        // Запрещаем браузеру переходить по адресу формы\r\n        evt.preventDefault();\r\n\r\n        setIsLoading(true)\r\n      \r\n        // Передаём значения управляемых компонентов во внешний обработчик\r\n        onUpdateUser({\r\n          newName: inputValue.userName,\r\n          about: inputValue.userDescription,\r\n        });\r\n\r\n        setIsLoading(false)\r\n      }\r\n\r\n    return(\r\n        <PopupWithForm \r\n                title = 'Редактировать профиль'\r\n                name = 'profile'\r\n                isOpen = {isOpen}\r\n                onClose={onClose}\r\n                onSubmit={handleSubmit}\r\n                hasInvalid={hasInvalid}\r\n                isLoading={isLoading}\r\n                buttonTitle='Сохранить'\r\n                >\r\n                    <fieldset className=\"form__input-container\">\r\n                        <label htmlFor=\"name-input\" className=\"form__field\">\r\n                            <input\r\n                                type=\"text\"\r\n                                name=\"userName\"\r\n                                placeholder=\"Имя пользователя\"\r\n                                id=\"name-input\" \r\n                                className=\"form__item form__item_content_name\" \r\n                                required\r\n                                minLength=\"2\" \r\n                                maxLength=\"40\"\r\n                                onChange={handleInput}\r\n                                value={inputValue.userName}\r\n                            />\r\n                            <span id=\"name-input-error\"\r\n                            className={`form__input-error ${isValid.userName ? '' : 'form__input-error_active'}`}>\r\n                                {validationMessage.userName}\r\n                            </span>\r\n                        </label>\r\n                        <label htmlFor=\"description-input\" className=\"form__field\">\r\n                            <input \r\n                                type=\"text\"\r\n                                name=\"userDescription\"\r\n                                placeholder=\"Род деятельности\" \r\n                                id=\"description-input\" \r\n                                className=\"form__item form__item_content_description\" \r\n                                required\r\n                                minLength=\"2\" \r\n                                maxLength=\"200\"\r\n                                onChange={handleInput}\r\n                                value={inputValue.userDescription}\r\n                            />\r\n                            <span id=\"description-input-error\"\r\n                            className={`form__input-error ${isValid.userDescription ? '' : 'form__input-error_active'}`}>\r\n                                {validationMessage.userDescription}\r\n                            </span>\r\n                        </label>\r\n                    </fieldset>\r\n                </PopupWithForm>\r\n    )\r\n}\r\n\r\nexport default EditProfilePopup","import React, {useRef, useState, useEffect} from 'react';\r\nimport PopupWithForm from '../PopupWithForm/PopupWithForm';\r\n\r\nfunction EditAvatarPopup({isOpen, onClose, onUpdateAvatar}) {\r\n    const [inputValue, setInputValue] = useState({\r\n        avatarLink: ''\r\n    })\r\n    const [isValid, setIsValid] = useState({\r\n        avatarLink: false,\r\n    })\r\n    const [hasInvalid, setHasInvalid] = useState(true);\r\n    const [validationMessage, setValidationMessage] = useState({\r\n        avatarLink: '',\r\n    });\r\n    \r\n    const handleInput = (evt) => {\r\n        const {name, value, validity} = evt.target;\r\n        \r\n        setInputValue({\r\n            ...inputValue,\r\n            [name]: value\r\n        })\r\n\r\n        setIsValid({\r\n            ...isValid,\r\n            [name]:validity.valid\r\n        })\r\n\r\n        setValidationMessage({\r\n            ...validationMessage,\r\n            [name]:evt.target.validationMessage\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        isValid.avatarLink ? setHasInvalid(false) : setHasInvalid(true)\r\n    }, [inputValue])\r\n\r\n    useEffect(() => {\r\n        setInputValue({\r\n            ...inputValue,\r\n            avatarLink: '',\r\n        })\r\n\r\n        setIsValid({\r\n            ...isValid,\r\n            avatarLink: false,\r\n        })\r\n\r\n        setHasInvalid(true)\r\n\r\n        setValidationMessage({\r\n            ...validationMessage,\r\n            avatarLink: ''\r\n        })\r\n      }, [isOpen]);\r\n\r\n    const avatarRef = useRef();\r\n\r\n    const handleSubmit = (evt) => {\r\n        evt.preventDefault();\r\n      \r\n        onUpdateAvatar(avatarRef.current.value);\r\n      }\r\n      \r\n    return(\r\n        <PopupWithForm \r\n                title = 'Обновить аватар'\r\n                name = 'avatar'\r\n                isOpen = {isOpen}\r\n                onClose={onClose}\r\n                onSubmit={handleSubmit}\r\n                hasInvalid={hasInvalid}\r\n                >\r\n                    <fieldset className=\"form__input-container\">\r\n                        <label htmlFor=\"avatar-input\" className=\"form__field\">\r\n                            <input \r\n                                type=\"url\"\r\n                                name=\"avatarLink\"\r\n                                placeholder=\"Ссылка на аватар\" \r\n                                id=\"avatar-input\" \r\n                                className={`form__item form__item_content_place-name ${isValid.avatarLink ? '' : 'form__item_type_error'}`}\r\n                                required\r\n                                ref={avatarRef}\r\n                                value={inputValue.avatarLink}\r\n                                onChange={handleInput}\r\n                            />\r\n                            <span id=\"avatar-input-error\"\r\n                            className={`form__input-error ${isValid.userName ? '' : 'form__input-error_active'}`}\r\n                            >\r\n                                {validationMessage.avatarLink}\r\n                            </span>\r\n                        </label>\r\n                    </fieldset>\r\n                </PopupWithForm>\r\n    )\r\n}\r\n\r\nexport default EditAvatarPopup","import React, {useState, useEffect} from 'react';\r\nimport PopupWithForm from '../PopupWithForm/PopupWithForm';\r\n\r\nfunction AddPlacePopup ({isOpen, onClose, onAddPlace}) {\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    const [inputValue, setInputValue] = useState({\r\n        placeName: '',\r\n        imgLink: ''\r\n    })\r\n    const [isValid, setIsValid] = useState({\r\n        placeName: false,\r\n        imgLink: false\r\n    })\r\n    const [hasInvalid, setHasInvalid] = useState(true);\r\n    const [validationMessage, setValidationMessage] = useState({\r\n        placeName: '',\r\n        imgLink: ''\r\n    });\r\n\r\n    const handleInput = (evt) => {\r\n        const {name, value, validity} = evt.target;\r\n        \r\n        setInputValue({\r\n            ...inputValue,\r\n            [name]: value\r\n        })\r\n\r\n        setIsValid({\r\n            ...isValid,\r\n            [name]:validity.valid\r\n        })\r\n\r\n        setValidationMessage({\r\n            ...validationMessage,\r\n            [name]:evt.target.validationMessage\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        (isValid.placeName && isValid.imgLink) ? setHasInvalid(false) : setHasInvalid(true)\r\n    }, [inputValue])\r\n\r\n    useEffect(() => {\r\n        \r\n        setInputValue({\r\n            ...inputValue,\r\n            placeName: '',\r\n            imgLink: ''\r\n        })\r\n\r\n        setValidationMessage({\r\n            ...validationMessage,\r\n            placeName: '',\r\n            imgLink: ''\r\n        })\r\n\r\n        setIsValid({\r\n            ...isValid,\r\n            placeName: false,\r\n            imgLink: false\r\n        })\r\n\r\n      }, [isOpen]); \r\n\r\n    const handleSubmit = (evt) => {\r\n        // Запрещаем браузеру переходить по адресу формы\r\n        evt.preventDefault();\r\n\r\n        setIsLoading(true)\r\n      \r\n        // Передаём значения управляемых компонентов во внешний обработчик\r\n        onAddPlace({\r\n          link: inputValue.imgLink,\r\n          name: inputValue.placeName\r\n        });\r\n\r\n        setIsLoading(false)\r\n      }\r\n\r\n    return (\r\n        <PopupWithForm \r\n                title = 'Новое место'\r\n                name = 'editor'\r\n                isOpen = {isOpen}\r\n                onClose={onClose}\r\n                onSubmit={handleSubmit}\r\n                hasInvalid={hasInvalid}\r\n                buttonTitle='Сохранить'\r\n                isLoading={isLoading}\r\n                >\r\n                    <fieldset className=\"form__input-container\">\r\n                        <label htmlFor=\"place-input\" className=\"form__field\">\r\n                            <input \r\n                                type=\"text\"\r\n                                name=\"placeName\" \r\n                                placeholder=\"Название\" \r\n                                id=\"place-input\" \r\n                                className={`form__item form__item_content_place-name ${isValid.placeName ? '' : 'form__item_type_error'}`}\r\n                                required \r\n                                minLength=\"1\"\r\n                                onChange={handleInput}\r\n                                value={inputValue.placeName}\r\n                            />\r\n                            <span\r\n                            id=\"place-input-error\"\r\n                            className={`form__input-error ${isValid.userName ? '' : 'form__input-error_active'}`}\r\n                            >\r\n                                {validationMessage.placeName}\r\n                            </span>\r\n                        </label>\r\n                        <label htmlFor=\"link-input\" className=\"form__field\">\r\n                            <input\r\n                                type=\"url\"\r\n                                name=\"imgLink\"\r\n                                placeholder=\"Ссылка на картинку\" \r\n                                id=\"link-input\" \r\n                                className={`form__item form__item_content_place-name ${isValid.imgLink ? '' : 'form__item_type_error'}`}\r\n                                required\r\n                                onChange={handleInput}\r\n                                value={inputValue.imgLink}\r\n                            />\r\n                            <span\r\n                            id=\"link-input-error\"\r\n                            className={`form__input-error ${isValid.userName ? '' : 'form__input-error_active'}`}\r\n                            >\r\n                                {validationMessage.imgLink}\r\n                            </span>\r\n                        </label>\r\n                    </fieldset>\r\n                </PopupWithForm>\r\n    )\r\n}\r\n\r\nexport default AddPlacePopup","import React, {useState} from 'react';\r\nimport PopupWithForm from '../PopupWithForm/PopupWithForm'\r\n\r\nfunction ConfirmationPopup ({isOpen, onClose, cardId, action}) {\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    const onSubmit = (evt) => {\r\n        evt.preventDefault();\r\n        setIsLoading(true);\r\n        action(cardId);\r\n        onClose();\r\n        setIsLoading(false);\r\n    }    \r\n\r\n    return(\r\n        <PopupWithForm \r\n            title = 'Вы уверены?'\r\n            name = 'confirmation'\r\n            isOpen = {isOpen}\r\n            onClose={onClose}\r\n            onSubmit={onSubmit}\r\n            hasInvalid={false}\r\n            isLoading={isLoading}\r\n            buttonTitle='Да'\r\n        >\r\n        </PopupWithForm>\r\n    )\r\n}\r\n\r\nexport default ConfirmationPopup","class Api {\r\n    constructor({ baseUrl, token}) {\r\n        this._baseUrl = baseUrl;\r\n        this._token = token;\r\n    }\r\n\r\n    _resultsProcessing (res) {\r\n        if (res.ok) {\r\n            return res.json()\r\n        } else {return Promise.reject(`Ошибка: ${res.status}`)}\r\n    }\r\n\r\n    getInitialCards () {\r\n        return fetch(`${this._baseUrl}cards`, {\r\n            headers: {\r\n                authorization: this._token,\r\n                'content-type': 'application/json'\r\n            }\r\n        })\r\n        .then(res => {\r\n            return this._resultsProcessing(res)\r\n        })\r\n        .catch((err) => {\r\n            console.log(err)\r\n        })\r\n    }\r\n\r\n    getUserInfo () {\r\n        return fetch(`${this._baseUrl}users/me`, {\r\n            headers: {\r\n                authorization: this._token,\r\n                'content-type': 'application/json'\r\n            }\r\n        })\r\n        .then(res => {\r\n            return this._resultsProcessing(res)\r\n        })\r\n        .catch((err) => {\r\n            console.log(err)\r\n        })\r\n    }\r\n\r\n    sendUserInfo(data) {\r\n        return fetch(`${this._baseUrl}users/me`, {\r\n            method: 'PATCH',\r\n            headers: {\r\n                authorization: this._token,\r\n                'Content-Type': 'application/json'\r\n        },\r\n            body: JSON.stringify({\r\n            name: data.newName,\r\n            about: data.about\r\n  })\r\n})\r\n        .then(res => {\r\n            return this._resultsProcessing(res)\r\n        })\r\n        .catch((err) => {\r\n            console.log(err)\r\n        })\r\n    }\r\n\r\n    getCardId(card) {\r\n        this._cardId = card._id;\r\n    }\r\n\r\n    deleteCard (id) {\r\n        return fetch(`${this._baseUrl}cards/${id}`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                authorization: this._token,\r\n                'content-type': 'application/json'\r\n            },\r\n        })\r\n        .then(res => {\r\n            return this._resultsProcessing(res)\r\n        })\r\n        .catch((err) => {\r\n            console.log(err)\r\n        })\r\n    }\r\n\r\n    likeCard (id) {\r\n        return fetch(`${this._baseUrl}cards/likes/${id}`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                authorization: this._token,\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n        .then(res => {\r\n            return this._resultsProcessing(res)\r\n        })\r\n        .catch((err) => {\r\n            console.log(err)\r\n        })\r\n    }\r\n\r\n    dislikeCard (id) {\r\n        return fetch(`${this._baseUrl}cards/likes/${id}`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                authorization: this._token,\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n        .then(res => {\r\n            return this._resultsProcessing(res)\r\n        })\r\n        .catch((err) => {\r\n            console.log(err)\r\n        })\r\n    }\r\n\r\n    uploadCard (card) {\r\n        return fetch(`${this._baseUrl}cards`, {\r\n            method: 'POST',\r\n            headers: {\r\n                authorization: this._token,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                name: card.name,\r\n                link: card.link\r\n            })\r\n        })\r\n        .then(res => {\r\n            return this._resultsProcessing(res)\r\n        })\r\n        .catch((err) => {\r\n            console.log(err)\r\n        })\r\n    }\r\n\r\n    uploadAvatar (avatarLink) {\r\n        return fetch(`${this._baseUrl}users/me/avatar`, {\r\n            method: 'PATCH',\r\n            headers: {\r\n                authorization: this._token,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                avatar: avatarLink\r\n            })\r\n        })\r\n        .then(res => {\r\n            return this._resultsProcessing(res)\r\n        })\r\n        .catch((err) => {\r\n            console.log(err)\r\n        })\r\n    }\r\n}\r\n\r\nconst api = new Api({\r\n    baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-14/',\r\n    token: '614c831a-d135-4d7c-82ff-12ed74000dec',\r\n})\r\n\r\nexport default api;","import {createContext} from 'react'\r\n\r\nexport const CardsContext = createContext();","const cardsFromServerReprocessor = (card, user) => {\r\n    return {\r\n        imgLink: card.link,\r\n        name: card.name,\r\n        likes: card.likes,\r\n        likesNumber: Object.keys(card.likes).length,\r\n        isLiked: card.likes.some(i => i._id === user._id),\r\n        cardOwnerId: card.owner._id,\r\n        cardId: card._id\r\n    }\r\n}\r\n\r\nexport {cardsFromServerReprocessor}","import React, {useEffect, useState} from 'react';\r\nimport Header from '../Header/Header.js';\r\nimport Main from '../Main/Main.js';\r\nimport Footer from '../Footer/Footer.js'\r\nimport ImagePopup from '../ImagePopup/ImagePopup.js'\r\nimport EditProfilePopup from '../EditProfilePopup/EditProfilePopup';\r\nimport EditAvatarPopup from '../EditAvatarPopup/EditAvatarPopup';\r\nimport AddPlacePopup from '../AddPlacePopup/AddPlacePopup';\r\nimport ConfirmationPopup from '../ConfirmationPopup/ConfirmationPopup';\r\nimport api from '../../utils/Api.js';\r\nimport {CurrentUserContext} from '../Contexts/CurrentUserContext';\r\nimport {CardsContext} from '../Contexts/CardsContext';\r\nimport {cardsFromServerReprocessor} from '../../utils/utils'\r\n\r\nfunction App() {\r\n    const [currentUser, setCurrentUser] = useState({});\r\n    const [isEditProfilePopupOpen, setIsEditProfilePopupOpen] = useState(false);\r\n    const [isAddPlacePopupOpen, setIsAddPlacePopupOpen] = useState(false);\r\n    const [isEditAvatarPopupOpen, setIsEditAvatarPopupOpen] = useState(false);\r\n    const [isConfirmationPopupOpen, setIsConfirmationPopupOpen] = useState(false);\r\n    const [isImgPopupOpen, setIsImgPopupOpen] = useState(false);\r\n    const [selectedCard, setSelectedCard] = useState({});\r\n    const [cards, setCards] = useState([]);\r\n\r\n    useEffect (() => {\r\n        const getUserAndCards =  async () => {\r\n            const userInfo = await api.getUserInfo();\r\n            const cardsFromServer = await api.getInitialCards();\r\n            const cardsToSet = cardsFromServer.map(item => {\r\n                return cardsFromServerReprocessor(item, userInfo)\r\n            })\r\n            setCards(cardsToSet);\r\n            setCurrentUser(userInfo);\r\n        }\r\n        getUserAndCards()\r\n    }, [])\r\n\r\n    const handleEditProfileButton = () => {\r\n        setIsEditProfilePopupOpen(true);\r\n        window.addEventListener('keydown',  handleEscClose)\r\n    }\r\n\r\n    const handleAddPlaceButton = () => {\r\n        setIsAddPlacePopupOpen(true);\r\n        window.addEventListener('keydown',  handleEscClose)\r\n    }\r\n\r\n    const handleEditAvatarButton = () => {\r\n        setIsEditAvatarPopupOpen(true);\r\n        window.addEventListener('keydown',  handleEscClose)\r\n    }\r\n\r\n    const closeAllPopups = () => {\r\n        setIsEditProfilePopupOpen(false);\r\n        setIsAddPlacePopupOpen(false);\r\n        setIsEditAvatarPopupOpen(false);\r\n        setIsImgPopupOpen(false);\r\n        setIsConfirmationPopupOpen(false);\r\n        window.removeEventListener('keydown', handleEscClose);\r\n    }\r\n\r\n    const handleEscClose = (evt) => {\r\n        if (evt.key === 'Escape') {\r\n            closeAllPopups()\r\n        }\r\n    }\r\n\r\n    const handleCardClicked = (evt) => {\r\n        const card = {\r\n            imgLink: evt.target.src,\r\n            description: evt.target.alt\r\n        }\r\n        setSelectedCard(card);\r\n        setIsImgPopupOpen(true);\r\n        window.addEventListener('keydown',  handleEscClose)\r\n    }\r\n\r\n    const onUpdateUser = async (userData) => {\r\n        const newUser = await api.sendUserInfo(userData);\r\n        setCurrentUser(newUser);\r\n        closeAllPopups()\r\n    }\r\n\r\n    const onUpdateAvatar = async (avatarLink) => {\r\n        const newUser = await api.uploadAvatar(avatarLink);\r\n        setCurrentUser(newUser);\r\n        closeAllPopups()\r\n    }\r\n\r\n    const handleCardLike = async (card) => {\r\n        // Отправляем запрос в API и получаем обновлённые данные карточки\r\n        const newCardFromServer = card.isLiked ? await api.dislikeCard(card.cardId) : await api.likeCard(card.cardId);\r\n        const newCard = cardsFromServerReprocessor(newCardFromServer, currentUser)\r\n        \r\n        const newCards = cards.map((c) => {\r\n            const cardToReturn = c.cardId === card.cardId ? newCard : c;\r\n            return cardToReturn\r\n        });\r\n        setCards(newCards);\r\n    }\r\n\r\n    const cardDelete = async (id) => {\r\n        await api.deleteCard(id);\r\n        const newCards = cards.filter(item => {\r\n            return item.cardId !== id\r\n        })\r\n        setCards(newCards)\r\n    }\r\n\r\n    const onCardDelete = (card) => {\r\n        setSelectedCard(card);\r\n        setIsConfirmationPopupOpen(true);\r\n    }\r\n\r\n    const handleAddPlaceSubmit = async (card) => {\r\n        const newCard = await api.uploadCard(card);\r\n        const cardToSet = cardsFromServerReprocessor(newCard, currentUser);\r\n        setCards([cardToSet, ...cards])\r\n        setIsAddPlacePopupOpen(false)\r\n    }\r\n\r\n  return (\r\n    <div className=\"root\">\r\n        <CurrentUserContext.Provider value={currentUser}>\r\n            <CardsContext.Provider value={cards}>\r\n                <Header />\r\n                <Main\r\n                onEditProfile={handleEditProfileButton}\r\n                onAddPlace={handleAddPlaceButton}\r\n                onEditAvatar={handleEditAvatarButton}\r\n                handleCardClicked={handleCardClicked}\r\n                cards={cards}\r\n                onCardLike={handleCardLike}\r\n                onCardDelete={onCardDelete}\r\n                />\r\n                <Footer />\r\n                <ImagePopup \r\n                card = {selectedCard}\r\n                isOpen = {isImgPopupOpen}\r\n                onClose = {closeAllPopups}\r\n                />\r\n                <EditProfilePopup isOpen={isEditProfilePopupOpen} onClose={closeAllPopups} onUpdateUser={onUpdateUser} /> \r\n                <AddPlacePopup isOpen={isAddPlacePopupOpen} onClose={closeAllPopups} onAddPlace={handleAddPlaceSubmit} />\r\n                <EditAvatarPopup isOpen={isEditAvatarPopupOpen} onClose={closeAllPopups} onUpdateAvatar={onUpdateAvatar} />\r\n                <ConfirmationPopup \r\n                isOpen={isConfirmationPopupOpen} \r\n                onClose={closeAllPopups} \r\n                cardId={selectedCard.cardId} \r\n                action={cardDelete}\r\n                />\r\n            </CardsContext.Provider>\r\n        </CurrentUserContext.Provider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App/App.js';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}